/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import url from '../assets/Strobe.mp4'
import {useThree,useFrame} from "@react-three/fiber";

import {
  CubeTextureLoader,
  CubeCamera,
  WebGLCubeRenderTarget,
  RGBFormat,
  LinearMipmapLinearFilter
} from "three";
export default function Model(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/astronome.glb')
  const { actions } = useAnimations(animations, group)
  useEffect(()=>{
    //Armature|COSMONAUT(0)_TempMotion|COSMONAUT(0)_TempMotion: (...)
    actions['Armature|COSMONAUT(0)_TempMotion|COSMONAUT(0)_TempMotion'].play().setEffectiveTimeScale(2.5)
  })
  const [video] = useState(() => {
    const vid = document.createElement("video");
    vid.src = url;
    vid.crossOrigin = "Anonymous";
    vid.loop = true;
    vid.muted = true;
    vid.play();
    return vid;
  });
  
  const { scene, gl } = useThree();
  // The cubeRenderTarget is used to generate a texture for the reflective sphere.
  // It must be updated on each frame in order to track camera movement and other changes.
  const cubeRenderTarget = new WebGLCubeRenderTarget(256, {
    format: RGBFormat,
    generateMipmaps: true,
    minFilter: LinearMipmapLinearFilter
  });
  const cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);
  cubeCamera.position.set(0, 0, 0);
  scene.add(cubeCamera);

  // Update the cubeCamera with current renderer and scene.
  useFrame(() => cubeCamera.update(gl, scene)
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="RL_ExtendedRoot" scale={0.01}>
        <group name="valvebiped_j_latiss_le" position={[12.18, 0.1, -1.16]} rotation={[-3.05, -1.24, -0.07]} />
        <group name="valvebiped_j_latiss_ri" position={[-12.18, 0.11, -1.17]} rotation={[0.09, -1.24, 3.07]} />
      </group>
      <group name="Armature" scale={0.01}>
        <primitive object={nodes.BoneRoot} />
        <skinnedMesh
          geometry={nodes.Object001_1.geometry}
          material={materials.Material__35}
          skeleton={nodes.Object001_1.skeleton}
        />        <skinnedMesh
        geometry={nodes.Object001_2.geometry}
        skeleton={nodes.Object001_2.skeleton}
      >
      <meshBasicMaterial
        attach="material"
        envMap={cubeCamera.renderTarget.texture}
        color="white"
        roughness={0.1}
        metalness={1}
      />
        </skinnedMesh>
        <skinnedMesh
          geometry={nodes.Object001_3.geometry}
          material={materials.Material__37}
          skeleton={nodes.Object001_3.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Object001_4.geometry}
          material={materials.Material__38}
          skeleton={nodes.Object001_4.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Object001_5.geometry}
          material={materials.Material__39}
          skeleton={nodes.Object001_5.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Object001_6.geometry}
          material={materials.Material__40}
          skeleton={nodes.Object001_6.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Object001_7.geometry}
          material={materials.Material__41}
          skeleton={nodes.Object001_7.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Object001_8.geometry}
          material={materials.Material__42}
          skeleton={nodes.Object001_8.skeleton}
        />
      </group>
    </group>
  )
}

useGLTF.preload('/astronome.glb')
